{
  "additionalProperties": false,
  "properties": {
    "external_dependencies": {
      "patternProperties": {
        ".*": {
          "additionalProperties": false,
          "properties": {
            "version": {
              "description": "Same as `dependencies`",
              "pattern": "^((==|~=|<|>|<=|>=|~>)\\s*)?(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*(\\s*,\\s*((==|~=|<|>|<=|>=|~>)\\s*)?(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*)*$",
              "type": "string"
            }
          },
          "type": "object"
        }
      },
      "description": "Like dependencies, this specifies packages which are required for the\npackage but should *not* be managed by the Neovim package manager, such\nas `gcc` or `cmake`. Package managers are encouraged to provide a\nnotification to the user if the dependency is not available."
    },
    "packspec": {
      "description": "The current specification version. (0.1.0) at this time.",
      "pattern": "^(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*$",
      "type": "string"
    },
    "package": {
      "type": "string",
      "description": "The name of the package"
    },
    "description": {
      "additionalProperties": false,
      "description": "Description of the package",
      "properties": {
        "summary": {
          "type": "string",
          "description": "Short description of the package, typically less than 100 character\nlong."
        },
        "homepage": {
          "type": "string",
          "description": "Homepage of the package. In most cases this will be the GitHub URL."
        },
        "detailed": {
          "type": "string",
          "description": "Long-form description of the package, this should convey the\npackage's principal functionality to the user without being as\ndetailed as the package readme."
        },
        "license": {
          "type": "string",
          "description": "This is [SPDX](https:\/\/spdx.org\/licenses\/) license identifier. Dual\nlicensing is indicated via joining the relevant licenses via `\/`."
        },
        "author": {
          "additionalProperties": false,
          "description": "Author of the package",
          "properties": {
            "email": {
              "type": "string",
              "description": "Author email"
            },
            "name": {
              "type": "string",
              "description": "Author name"
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "version": {
      "description": "The version of the package. Should obey semantic versioning\nconventions, for example `0.1.0`. Plugins should have a git commit\nwith a `tag` matching this version. For all version identifiers,\nimplementation should check for a `version` prefixed with `v` in the\ngit repository, as this is a common convention.",
      "pattern": "^(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*$",
      "type": "string"
    },
    "$schema": {
      "type": "string",
      "description": "The optional json schema URI for validation with json-language-server."
    },
    "dependencies": {
      "patternProperties": {
        ".*": {
          "additionalProperties": false,
          "properties": {
            "version": {
              "description": "Version constraints on the package.\n  * Accepted operators are the relational operators of Lua:\n    == \\~= < > <= >= , as well as a special operator, \\~>,\n    inspired by the \"pessimistic operator\" of RubyGems\n    (\"\\~> 2\" means \">= 2, < 3\"; \"~> 2.4\" means \">= 2.4, < 2.5\").\n    No operator means an implicit == (i.e., \"lfs 1.0\" is the\n    same as \"lfs == 1.0\"). \"lua\" is an special dependency name;\n    it matches not a rock, but the version of Lua in use.\n    Multiple version constraints can be joined with a `comma`,\n    e.g. `\"neovim >= 5.0, < 7.0\"`.\n  * If no version is specified, then HEAD is assumed valid.\n  * If no upper bound is specified, then any commit after the\n    tag corresponding to the lower bound is assumed valid. The\n    commit chosen is up to the plugin manager's discretion, but\n    implementers are strongly encouraged to always use the\n    latest valid commit.\n  * If an upper bound is specified, then the the tag\n    corresponding to that upper bound is the latest commit that\n    is valid",
              "pattern": "^((==|~=|<|>|<=|>=|~>)\\s*)?(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*(\\s*,\\s*((==|~=|<|>|<=|>=|~>)\\s*)?(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*)*$",
              "type": "string"
            },
            "releases_only": {
              "type": "boolean",
              "description": "Whether the package manager should only resolve version\nconstraints to include tagged releases."
            },
            "source": {
              "description": "Source of the dependency. See previous `source` description.",
              "pattern": "^\\w+:\/\/",
              "type": "string"
            }
          },
          "type": "object"
        }
      }
    },
    "source": {
      "pattern": "^\\w+:\/\/",
      "examples": [
        "luarocks:\/\/argparse",
        "git:\/\/github.com\/nvim-lua\/plenary.nvim"
      ],
      "description": "The URL of the package source archive. Examples:\n\"http:\/\/github.com\/downloads\/keplerproject\/wsapi\/wsapi-1.3.4.tar.gz\",\n\"git:\/\/github.com\/keplerproject\/wsapi.git\". Different protocols are\nsupported:\n\n    * `luarocks:\/\/` - for luarocks packages\n    * `file:\/\/` - for URLs in the local filesystem (note that for Unix\n      paths, the root slash is the third slash, resulting in paths like\n      \"file:\/\/\/full\/path\/filename\"\n    * `git:\/\/` - for the Git source control manager\n    * `git+https:\/\/` - for the Git source control manager when using\n      repositories that need https:\/\/ URLs.\n    * `git+ssh:\/\/` - for the Git source control manager when using\n      repositories that need SSH login, such as git@example.com\/myrepo.\n    * `http:\/\/` - for HTTP URLs\n    * `https:\/\/` - for HTTPS URLs",
      "type": "string"
    }
  },
  "title": "packspec",
  "description": "A package specification for Neovim",
  "required": [
    "package",
    "source"
  ],
  "type": "object"
}
